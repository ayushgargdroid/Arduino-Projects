
Demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000004e6  0000055a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000648  00000000  00000000  0000055c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b77  00000000  00000000  00000ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000171b  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000172c  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#include<util/delay.h>
#include<avr/interrupt.h>

void main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	6c 97       	sbiw	r28, 0x1c	; 28
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
	sei();
  80:	78 94       	sei

	DDRD |= 1<<PIND4;
  82:	81 e3       	ldi	r24, 0x31	; 49
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	21 e3       	ldi	r18, 0x31	; 49
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	f9 01       	movw	r30, r18
  8c:	20 81       	ld	r18, Z
  8e:	20 61       	ori	r18, 0x10	; 16
  90:	fc 01       	movw	r30, r24
  92:	20 83       	st	Z, r18

	TCCR1A |= 1<<COM1A1 | 1<<WGM11;
  94:	8f e4       	ldi	r24, 0x4F	; 79
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	2f e4       	ldi	r18, 0x4F	; 79
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	f9 01       	movw	r30, r18
  9e:	20 81       	ld	r18, Z
  a0:	22 68       	ori	r18, 0x82	; 130
  a2:	fc 01       	movw	r30, r24
  a4:	20 83       	st	Z, r18
	TCCR1B |= 1<<WGM12 | 1<<WGM13 | 1<<CS10;
  a6:	8e e4       	ldi	r24, 0x4E	; 78
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	2e e4       	ldi	r18, 0x4E	; 78
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	f9 01       	movw	r30, r18
  b0:	20 81       	ld	r18, Z
  b2:	29 61       	ori	r18, 0x19	; 25
  b4:	fc 01       	movw	r30, r24
  b6:	20 83       	st	Z, r18
	ICR1 = 65535;
  b8:	86 e4       	ldi	r24, 0x46	; 70
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	3f ef       	ldi	r19, 0xFF	; 255
  c0:	fc 01       	movw	r30, r24
  c2:	31 83       	std	Z+1, r19	; 0x01
  c4:	20 83       	st	Z, r18

	while(1)
	{
		OCR1B = 30000;
  c6:	88 e4       	ldi	r24, 0x48	; 72
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	20 e3       	ldi	r18, 0x30	; 48
  cc:	35 e7       	ldi	r19, 0x75	; 117
  ce:	fc 01       	movw	r30, r24
  d0:	31 83       	std	Z+1, r19	; 0x01
  d2:	20 83       	st	Z, r18
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	a8 ec       	ldi	r26, 0xC8	; 200
  da:	b2 e4       	ldi	r27, 0x42	; 66
  dc:	89 83       	std	Y+1, r24	; 0x01
  de:	9a 83       	std	Y+2, r25	; 0x02
  e0:	ab 83       	std	Y+3, r26	; 0x03
  e2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  e4:	20 e0       	ldi	r18, 0x00	; 0
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	4a e7       	ldi	r20, 0x7A	; 122
  ea:	53 e4       	ldi	r21, 0x43	; 67
  ec:	69 81       	ldd	r22, Y+1	; 0x01
  ee:	7a 81       	ldd	r23, Y+2	; 0x02
  f0:	8b 81       	ldd	r24, Y+3	; 0x03
  f2:	9c 81       	ldd	r25, Y+4	; 0x04
  f4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__mulsf3>
  f8:	dc 01       	movw	r26, r24
  fa:	cb 01       	movw	r24, r22
  fc:	8d 83       	std	Y+5, r24	; 0x05
  fe:	9e 83       	std	Y+6, r25	; 0x06
 100:	af 83       	std	Y+7, r26	; 0x07
 102:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 104:	20 e0       	ldi	r18, 0x00	; 0
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	40 e8       	ldi	r20, 0x80	; 128
 10a:	5f e3       	ldi	r21, 0x3F	; 63
 10c:	6d 81       	ldd	r22, Y+5	; 0x05
 10e:	7e 81       	ldd	r23, Y+6	; 0x06
 110:	8f 81       	ldd	r24, Y+7	; 0x07
 112:	98 85       	ldd	r25, Y+8	; 0x08
 114:	0e 94 56 01 	call	0x2ac	; 0x2ac <__cmpsf2>
 118:	88 23       	and	r24, r24
 11a:	2c f4       	brge	.+10     	; 0x126 <main+0xba>
		__ticks = 1;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	9a 87       	std	Y+10, r25	; 0x0a
 122:	89 87       	std	Y+9, r24	; 0x09
 124:	3f c0       	rjmp	.+126    	; 0x1a4 <main+0x138>
	else if (__tmp > 65535)
 126:	20 e0       	ldi	r18, 0x00	; 0
 128:	3f ef       	ldi	r19, 0xFF	; 255
 12a:	4f e7       	ldi	r20, 0x7F	; 127
 12c:	57 e4       	ldi	r21, 0x47	; 71
 12e:	6d 81       	ldd	r22, Y+5	; 0x05
 130:	7e 81       	ldd	r23, Y+6	; 0x06
 132:	8f 81       	ldd	r24, Y+7	; 0x07
 134:	98 85       	ldd	r25, Y+8	; 0x08
 136:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__gesf2>
 13a:	18 16       	cp	r1, r24
 13c:	4c f5       	brge	.+82     	; 0x190 <main+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 13e:	20 e0       	ldi	r18, 0x00	; 0
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	40 e2       	ldi	r20, 0x20	; 32
 144:	51 e4       	ldi	r21, 0x41	; 65
 146:	69 81       	ldd	r22, Y+1	; 0x01
 148:	7a 81       	ldd	r23, Y+2	; 0x02
 14a:	8b 81       	ldd	r24, Y+3	; 0x03
 14c:	9c 81       	ldd	r25, Y+4	; 0x04
 14e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__mulsf3>
 152:	dc 01       	movw	r26, r24
 154:	cb 01       	movw	r24, r22
 156:	bc 01       	movw	r22, r24
 158:	cd 01       	movw	r24, r26
 15a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <__fixunssfsi>
 15e:	dc 01       	movw	r26, r24
 160:	cb 01       	movw	r24, r22
 162:	9a 87       	std	Y+10, r25	; 0x0a
 164:	89 87       	std	Y+9, r24	; 0x09
 166:	0f c0       	rjmp	.+30     	; 0x186 <main+0x11a>
 168:	89 e1       	ldi	r24, 0x19	; 25
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	9c 87       	std	Y+12, r25	; 0x0c
 16e:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 170:	8b 85       	ldd	r24, Y+11	; 0x0b
 172:	9c 85       	ldd	r25, Y+12	; 0x0c
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <main+0x108>
 178:	9c 87       	std	Y+12, r25	; 0x0c
 17a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 17c:	89 85       	ldd	r24, Y+9	; 0x09
 17e:	9a 85       	ldd	r25, Y+10	; 0x0a
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	9a 87       	std	Y+10, r25	; 0x0a
 184:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 186:	89 85       	ldd	r24, Y+9	; 0x09
 188:	9a 85       	ldd	r25, Y+10	; 0x0a
 18a:	89 2b       	or	r24, r25
 18c:	69 f7       	brne	.-38     	; 0x168 <main+0xfc>
 18e:	14 c0       	rjmp	.+40     	; 0x1b8 <main+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 190:	6d 81       	ldd	r22, Y+5	; 0x05
 192:	7e 81       	ldd	r23, Y+6	; 0x06
 194:	8f 81       	ldd	r24, Y+7	; 0x07
 196:	98 85       	ldd	r25, Y+8	; 0x08
 198:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <__fixunssfsi>
 19c:	dc 01       	movw	r26, r24
 19e:	cb 01       	movw	r24, r22
 1a0:	9a 87       	std	Y+10, r25	; 0x0a
 1a2:	89 87       	std	Y+9, r24	; 0x09
 1a4:	89 85       	ldd	r24, Y+9	; 0x09
 1a6:	9a 85       	ldd	r25, Y+10	; 0x0a
 1a8:	9e 87       	std	Y+14, r25	; 0x0e
 1aa:	8d 87       	std	Y+13, r24	; 0x0d
 1ac:	8d 85       	ldd	r24, Y+13	; 0x0d
 1ae:	9e 85       	ldd	r25, Y+14	; 0x0e
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <main+0x144>
 1b4:	9e 87       	std	Y+14, r25	; 0x0e
 1b6:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(100);
		OCR1B = 60000;
 1b8:	88 e4       	ldi	r24, 0x48	; 72
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	20 e6       	ldi	r18, 0x60	; 96
 1be:	3a ee       	ldi	r19, 0xEA	; 234
 1c0:	fc 01       	movw	r30, r24
 1c2:	31 83       	std	Z+1, r19	; 0x01
 1c4:	20 83       	st	Z, r18
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	a8 ec       	ldi	r26, 0xC8	; 200
 1cc:	b2 e4       	ldi	r27, 0x42	; 66
 1ce:	8f 87       	std	Y+15, r24	; 0x0f
 1d0:	98 8b       	std	Y+16, r25	; 0x10
 1d2:	a9 8b       	std	Y+17, r26	; 0x11
 1d4:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1d6:	20 e0       	ldi	r18, 0x00	; 0
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	4a e7       	ldi	r20, 0x7A	; 122
 1dc:	53 e4       	ldi	r21, 0x43	; 67
 1de:	6f 85       	ldd	r22, Y+15	; 0x0f
 1e0:	78 89       	ldd	r23, Y+16	; 0x10
 1e2:	89 89       	ldd	r24, Y+17	; 0x11
 1e4:	9a 89       	ldd	r25, Y+18	; 0x12
 1e6:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__mulsf3>
 1ea:	dc 01       	movw	r26, r24
 1ec:	cb 01       	movw	r24, r22
 1ee:	8b 8b       	std	Y+19, r24	; 0x13
 1f0:	9c 8b       	std	Y+20, r25	; 0x14
 1f2:	ad 8b       	std	Y+21, r26	; 0x15
 1f4:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 1f6:	20 e0       	ldi	r18, 0x00	; 0
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	40 e8       	ldi	r20, 0x80	; 128
 1fc:	5f e3       	ldi	r21, 0x3F	; 63
 1fe:	6b 89       	ldd	r22, Y+19	; 0x13
 200:	7c 89       	ldd	r23, Y+20	; 0x14
 202:	8d 89       	ldd	r24, Y+21	; 0x15
 204:	9e 89       	ldd	r25, Y+22	; 0x16
 206:	0e 94 56 01 	call	0x2ac	; 0x2ac <__cmpsf2>
 20a:	88 23       	and	r24, r24
 20c:	2c f4       	brge	.+10     	; 0x218 <main+0x1ac>
		__ticks = 1;
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	98 8f       	std	Y+24, r25	; 0x18
 214:	8f 8b       	std	Y+23, r24	; 0x17
 216:	3f c0       	rjmp	.+126    	; 0x296 <main+0x22a>
	else if (__tmp > 65535)
 218:	20 e0       	ldi	r18, 0x00	; 0
 21a:	3f ef       	ldi	r19, 0xFF	; 255
 21c:	4f e7       	ldi	r20, 0x7F	; 127
 21e:	57 e4       	ldi	r21, 0x47	; 71
 220:	6b 89       	ldd	r22, Y+19	; 0x13
 222:	7c 89       	ldd	r23, Y+20	; 0x14
 224:	8d 89       	ldd	r24, Y+21	; 0x15
 226:	9e 89       	ldd	r25, Y+22	; 0x16
 228:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__gesf2>
 22c:	18 16       	cp	r1, r24
 22e:	4c f5       	brge	.+82     	; 0x282 <main+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 230:	20 e0       	ldi	r18, 0x00	; 0
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	40 e2       	ldi	r20, 0x20	; 32
 236:	51 e4       	ldi	r21, 0x41	; 65
 238:	6f 85       	ldd	r22, Y+15	; 0x0f
 23a:	78 89       	ldd	r23, Y+16	; 0x10
 23c:	89 89       	ldd	r24, Y+17	; 0x11
 23e:	9a 89       	ldd	r25, Y+18	; 0x12
 240:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__mulsf3>
 244:	dc 01       	movw	r26, r24
 246:	cb 01       	movw	r24, r22
 248:	bc 01       	movw	r22, r24
 24a:	cd 01       	movw	r24, r26
 24c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <__fixunssfsi>
 250:	dc 01       	movw	r26, r24
 252:	cb 01       	movw	r24, r22
 254:	98 8f       	std	Y+24, r25	; 0x18
 256:	8f 8b       	std	Y+23, r24	; 0x17
 258:	0f c0       	rjmp	.+30     	; 0x278 <main+0x20c>
 25a:	89 e1       	ldi	r24, 0x19	; 25
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	9a 8f       	std	Y+26, r25	; 0x1a
 260:	89 8f       	std	Y+25, r24	; 0x19
 262:	89 8d       	ldd	r24, Y+25	; 0x19
 264:	9a 8d       	ldd	r25, Y+26	; 0x1a
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <main+0x1fa>
 26a:	9a 8f       	std	Y+26, r25	; 0x1a
 26c:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 26e:	8f 89       	ldd	r24, Y+23	; 0x17
 270:	98 8d       	ldd	r25, Y+24	; 0x18
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	98 8f       	std	Y+24, r25	; 0x18
 276:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 278:	8f 89       	ldd	r24, Y+23	; 0x17
 27a:	98 8d       	ldd	r25, Y+24	; 0x18
 27c:	89 2b       	or	r24, r25
 27e:	69 f7       	brne	.-38     	; 0x25a <main+0x1ee>
 280:	14 c0       	rjmp	.+40     	; 0x2aa <main+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 282:	6b 89       	ldd	r22, Y+19	; 0x13
 284:	7c 89       	ldd	r23, Y+20	; 0x14
 286:	8d 89       	ldd	r24, Y+21	; 0x15
 288:	9e 89       	ldd	r25, Y+22	; 0x16
 28a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <__fixunssfsi>
 28e:	dc 01       	movw	r26, r24
 290:	cb 01       	movw	r24, r22
 292:	98 8f       	std	Y+24, r25	; 0x18
 294:	8f 8b       	std	Y+23, r24	; 0x17
 296:	8f 89       	ldd	r24, Y+23	; 0x17
 298:	98 8d       	ldd	r25, Y+24	; 0x18
 29a:	9c 8f       	std	Y+28, r25	; 0x1c
 29c:	8b 8f       	std	Y+27, r24	; 0x1b
 29e:	8b 8d       	ldd	r24, Y+27	; 0x1b
 2a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <main+0x236>
 2a6:	9c 8f       	std	Y+28, r25	; 0x1c
 2a8:	8b 8f       	std	Y+27, r24	; 0x1b
		_delay_ms(100);
	}
 2aa:	0d cf       	rjmp	.-486    	; 0xc6 <main+0x5a>

000002ac <__cmpsf2>:
 2ac:	0e 94 8a 01 	call	0x314	; 0x314 <__fp_cmp>
 2b0:	08 f4       	brcc	.+2      	; 0x2b4 <__cmpsf2+0x8>
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	08 95       	ret

000002b6 <__fixunssfsi>:
 2b6:	0e 94 b6 01 	call	0x36c	; 0x36c <__fp_splitA>
 2ba:	88 f0       	brcs	.+34     	; 0x2de <__fixunssfsi+0x28>
 2bc:	9f 57       	subi	r25, 0x7F	; 127
 2be:	98 f0       	brcs	.+38     	; 0x2e6 <__fixunssfsi+0x30>
 2c0:	b9 2f       	mov	r27, r25
 2c2:	99 27       	eor	r25, r25
 2c4:	b7 51       	subi	r27, 0x17	; 23
 2c6:	b0 f0       	brcs	.+44     	; 0x2f4 <__fixunssfsi+0x3e>
 2c8:	e1 f0       	breq	.+56     	; 0x302 <__fixunssfsi+0x4c>
 2ca:	66 0f       	add	r22, r22
 2cc:	77 1f       	adc	r23, r23
 2ce:	88 1f       	adc	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	1a f0       	brmi	.+6      	; 0x2da <__fixunssfsi+0x24>
 2d4:	ba 95       	dec	r27
 2d6:	c9 f7       	brne	.-14     	; 0x2ca <__fixunssfsi+0x14>
 2d8:	14 c0       	rjmp	.+40     	; 0x302 <__fixunssfsi+0x4c>
 2da:	b1 30       	cpi	r27, 0x01	; 1
 2dc:	91 f0       	breq	.+36     	; 0x302 <__fixunssfsi+0x4c>
 2de:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__fp_zero>
 2e2:	b1 e0       	ldi	r27, 0x01	; 1
 2e4:	08 95       	ret
 2e6:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__fp_zero>
 2ea:	67 2f       	mov	r22, r23
 2ec:	78 2f       	mov	r23, r24
 2ee:	88 27       	eor	r24, r24
 2f0:	b8 5f       	subi	r27, 0xF8	; 248
 2f2:	39 f0       	breq	.+14     	; 0x302 <__fixunssfsi+0x4c>
 2f4:	b9 3f       	cpi	r27, 0xF9	; 249
 2f6:	cc f3       	brlt	.-14     	; 0x2ea <__fixunssfsi+0x34>
 2f8:	86 95       	lsr	r24
 2fa:	77 95       	ror	r23
 2fc:	67 95       	ror	r22
 2fe:	b3 95       	inc	r27
 300:	d9 f7       	brne	.-10     	; 0x2f8 <__fixunssfsi+0x42>
 302:	3e f4       	brtc	.+14     	; 0x312 <__fixunssfsi+0x5c>
 304:	90 95       	com	r25
 306:	80 95       	com	r24
 308:	70 95       	com	r23
 30a:	61 95       	neg	r22
 30c:	7f 4f       	sbci	r23, 0xFF	; 255
 30e:	8f 4f       	sbci	r24, 0xFF	; 255
 310:	9f 4f       	sbci	r25, 0xFF	; 255
 312:	08 95       	ret

00000314 <__fp_cmp>:
 314:	99 0f       	add	r25, r25
 316:	00 08       	sbc	r0, r0
 318:	55 0f       	add	r21, r21
 31a:	aa 0b       	sbc	r26, r26
 31c:	e0 e8       	ldi	r30, 0x80	; 128
 31e:	fe ef       	ldi	r31, 0xFE	; 254
 320:	16 16       	cp	r1, r22
 322:	17 06       	cpc	r1, r23
 324:	e8 07       	cpc	r30, r24
 326:	f9 07       	cpc	r31, r25
 328:	c0 f0       	brcs	.+48     	; 0x35a <__fp_cmp+0x46>
 32a:	12 16       	cp	r1, r18
 32c:	13 06       	cpc	r1, r19
 32e:	e4 07       	cpc	r30, r20
 330:	f5 07       	cpc	r31, r21
 332:	98 f0       	brcs	.+38     	; 0x35a <__fp_cmp+0x46>
 334:	62 1b       	sub	r22, r18
 336:	73 0b       	sbc	r23, r19
 338:	84 0b       	sbc	r24, r20
 33a:	95 0b       	sbc	r25, r21
 33c:	39 f4       	brne	.+14     	; 0x34c <__fp_cmp+0x38>
 33e:	0a 26       	eor	r0, r26
 340:	61 f0       	breq	.+24     	; 0x35a <__fp_cmp+0x46>
 342:	23 2b       	or	r18, r19
 344:	24 2b       	or	r18, r20
 346:	25 2b       	or	r18, r21
 348:	21 f4       	brne	.+8      	; 0x352 <__fp_cmp+0x3e>
 34a:	08 95       	ret
 34c:	0a 26       	eor	r0, r26
 34e:	09 f4       	brne	.+2      	; 0x352 <__fp_cmp+0x3e>
 350:	a1 40       	sbci	r26, 0x01	; 1
 352:	a6 95       	lsr	r26
 354:	8f ef       	ldi	r24, 0xFF	; 255
 356:	81 1d       	adc	r24, r1
 358:	81 1d       	adc	r24, r1
 35a:	08 95       	ret

0000035c <__fp_split3>:
 35c:	57 fd       	sbrc	r21, 7
 35e:	90 58       	subi	r25, 0x80	; 128
 360:	44 0f       	add	r20, r20
 362:	55 1f       	adc	r21, r21
 364:	59 f0       	breq	.+22     	; 0x37c <__fp_splitA+0x10>
 366:	5f 3f       	cpi	r21, 0xFF	; 255
 368:	71 f0       	breq	.+28     	; 0x386 <__fp_splitA+0x1a>
 36a:	47 95       	ror	r20

0000036c <__fp_splitA>:
 36c:	88 0f       	add	r24, r24
 36e:	97 fb       	bst	r25, 7
 370:	99 1f       	adc	r25, r25
 372:	61 f0       	breq	.+24     	; 0x38c <__fp_splitA+0x20>
 374:	9f 3f       	cpi	r25, 0xFF	; 255
 376:	79 f0       	breq	.+30     	; 0x396 <__fp_splitA+0x2a>
 378:	87 95       	ror	r24
 37a:	08 95       	ret
 37c:	12 16       	cp	r1, r18
 37e:	13 06       	cpc	r1, r19
 380:	14 06       	cpc	r1, r20
 382:	55 1f       	adc	r21, r21
 384:	f2 cf       	rjmp	.-28     	; 0x36a <__fp_split3+0xe>
 386:	46 95       	lsr	r20
 388:	f1 df       	rcall	.-30     	; 0x36c <__fp_splitA>
 38a:	08 c0       	rjmp	.+16     	; 0x39c <__fp_splitA+0x30>
 38c:	16 16       	cp	r1, r22
 38e:	17 06       	cpc	r1, r23
 390:	18 06       	cpc	r1, r24
 392:	99 1f       	adc	r25, r25
 394:	f1 cf       	rjmp	.-30     	; 0x378 <__fp_splitA+0xc>
 396:	86 95       	lsr	r24
 398:	71 05       	cpc	r23, r1
 39a:	61 05       	cpc	r22, r1
 39c:	08 94       	sec
 39e:	08 95       	ret

000003a0 <__fp_zero>:
 3a0:	e8 94       	clt

000003a2 <__fp_szero>:
 3a2:	bb 27       	eor	r27, r27
 3a4:	66 27       	eor	r22, r22
 3a6:	77 27       	eor	r23, r23
 3a8:	cb 01       	movw	r24, r22
 3aa:	97 f9       	bld	r25, 7
 3ac:	08 95       	ret

000003ae <__gesf2>:
 3ae:	0e 94 8a 01 	call	0x314	; 0x314 <__fp_cmp>
 3b2:	08 f4       	brcc	.+2      	; 0x3b6 <__gesf2+0x8>
 3b4:	8f ef       	ldi	r24, 0xFF	; 255
 3b6:	08 95       	ret

000003b8 <__mulsf3>:
 3b8:	0e 94 ef 01 	call	0x3de	; 0x3de <__mulsf3x>
 3bc:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <__fp_round>
 3c0:	0e 94 52 02 	call	0x4a4	; 0x4a4 <__fp_pscA>
 3c4:	38 f0       	brcs	.+14     	; 0x3d4 <__mulsf3+0x1c>
 3c6:	0e 94 59 02 	call	0x4b2	; 0x4b2 <__fp_pscB>
 3ca:	20 f0       	brcs	.+8      	; 0x3d4 <__mulsf3+0x1c>
 3cc:	95 23       	and	r25, r21
 3ce:	11 f0       	breq	.+4      	; 0x3d4 <__mulsf3+0x1c>
 3d0:	0c 94 49 02 	jmp	0x492	; 0x492 <__fp_inf>
 3d4:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__fp_nan>
 3d8:	11 24       	eor	r1, r1
 3da:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__fp_szero>

000003de <__mulsf3x>:
 3de:	0e 94 ae 01 	call	0x35c	; 0x35c <__fp_split3>
 3e2:	70 f3       	brcs	.-36     	; 0x3c0 <__mulsf3+0x8>

000003e4 <__mulsf3_pse>:
 3e4:	95 9f       	mul	r25, r21
 3e6:	c1 f3       	breq	.-16     	; 0x3d8 <__mulsf3+0x20>
 3e8:	95 0f       	add	r25, r21
 3ea:	50 e0       	ldi	r21, 0x00	; 0
 3ec:	55 1f       	adc	r21, r21
 3ee:	62 9f       	mul	r22, r18
 3f0:	f0 01       	movw	r30, r0
 3f2:	72 9f       	mul	r23, r18
 3f4:	bb 27       	eor	r27, r27
 3f6:	f0 0d       	add	r31, r0
 3f8:	b1 1d       	adc	r27, r1
 3fa:	63 9f       	mul	r22, r19
 3fc:	aa 27       	eor	r26, r26
 3fe:	f0 0d       	add	r31, r0
 400:	b1 1d       	adc	r27, r1
 402:	aa 1f       	adc	r26, r26
 404:	64 9f       	mul	r22, r20
 406:	66 27       	eor	r22, r22
 408:	b0 0d       	add	r27, r0
 40a:	a1 1d       	adc	r26, r1
 40c:	66 1f       	adc	r22, r22
 40e:	82 9f       	mul	r24, r18
 410:	22 27       	eor	r18, r18
 412:	b0 0d       	add	r27, r0
 414:	a1 1d       	adc	r26, r1
 416:	62 1f       	adc	r22, r18
 418:	73 9f       	mul	r23, r19
 41a:	b0 0d       	add	r27, r0
 41c:	a1 1d       	adc	r26, r1
 41e:	62 1f       	adc	r22, r18
 420:	83 9f       	mul	r24, r19
 422:	a0 0d       	add	r26, r0
 424:	61 1d       	adc	r22, r1
 426:	22 1f       	adc	r18, r18
 428:	74 9f       	mul	r23, r20
 42a:	33 27       	eor	r19, r19
 42c:	a0 0d       	add	r26, r0
 42e:	61 1d       	adc	r22, r1
 430:	23 1f       	adc	r18, r19
 432:	84 9f       	mul	r24, r20
 434:	60 0d       	add	r22, r0
 436:	21 1d       	adc	r18, r1
 438:	82 2f       	mov	r24, r18
 43a:	76 2f       	mov	r23, r22
 43c:	6a 2f       	mov	r22, r26
 43e:	11 24       	eor	r1, r1
 440:	9f 57       	subi	r25, 0x7F	; 127
 442:	50 40       	sbci	r21, 0x00	; 0
 444:	9a f0       	brmi	.+38     	; 0x46c <__mulsf3_pse+0x88>
 446:	f1 f0       	breq	.+60     	; 0x484 <__mulsf3_pse+0xa0>
 448:	88 23       	and	r24, r24
 44a:	4a f0       	brmi	.+18     	; 0x45e <__mulsf3_pse+0x7a>
 44c:	ee 0f       	add	r30, r30
 44e:	ff 1f       	adc	r31, r31
 450:	bb 1f       	adc	r27, r27
 452:	66 1f       	adc	r22, r22
 454:	77 1f       	adc	r23, r23
 456:	88 1f       	adc	r24, r24
 458:	91 50       	subi	r25, 0x01	; 1
 45a:	50 40       	sbci	r21, 0x00	; 0
 45c:	a9 f7       	brne	.-22     	; 0x448 <__mulsf3_pse+0x64>
 45e:	9e 3f       	cpi	r25, 0xFE	; 254
 460:	51 05       	cpc	r21, r1
 462:	80 f0       	brcs	.+32     	; 0x484 <__mulsf3_pse+0xa0>
 464:	0c 94 49 02 	jmp	0x492	; 0x492 <__fp_inf>
 468:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__fp_szero>
 46c:	5f 3f       	cpi	r21, 0xFF	; 255
 46e:	e4 f3       	brlt	.-8      	; 0x468 <__mulsf3_pse+0x84>
 470:	98 3e       	cpi	r25, 0xE8	; 232
 472:	d4 f3       	brlt	.-12     	; 0x468 <__mulsf3_pse+0x84>
 474:	86 95       	lsr	r24
 476:	77 95       	ror	r23
 478:	67 95       	ror	r22
 47a:	b7 95       	ror	r27
 47c:	f7 95       	ror	r31
 47e:	e7 95       	ror	r30
 480:	9f 5f       	subi	r25, 0xFF	; 255
 482:	c1 f7       	brne	.-16     	; 0x474 <__mulsf3_pse+0x90>
 484:	fe 2b       	or	r31, r30
 486:	88 0f       	add	r24, r24
 488:	91 1d       	adc	r25, r1
 48a:	96 95       	lsr	r25
 48c:	87 95       	ror	r24
 48e:	97 f9       	bld	r25, 7
 490:	08 95       	ret

00000492 <__fp_inf>:
 492:	97 f9       	bld	r25, 7
 494:	9f 67       	ori	r25, 0x7F	; 127
 496:	80 e8       	ldi	r24, 0x80	; 128
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	60 e0       	ldi	r22, 0x00	; 0
 49c:	08 95       	ret

0000049e <__fp_nan>:
 49e:	9f ef       	ldi	r25, 0xFF	; 255
 4a0:	80 ec       	ldi	r24, 0xC0	; 192
 4a2:	08 95       	ret

000004a4 <__fp_pscA>:
 4a4:	00 24       	eor	r0, r0
 4a6:	0a 94       	dec	r0
 4a8:	16 16       	cp	r1, r22
 4aa:	17 06       	cpc	r1, r23
 4ac:	18 06       	cpc	r1, r24
 4ae:	09 06       	cpc	r0, r25
 4b0:	08 95       	ret

000004b2 <__fp_pscB>:
 4b2:	00 24       	eor	r0, r0
 4b4:	0a 94       	dec	r0
 4b6:	12 16       	cp	r1, r18
 4b8:	13 06       	cpc	r1, r19
 4ba:	14 06       	cpc	r1, r20
 4bc:	05 06       	cpc	r0, r21
 4be:	08 95       	ret

000004c0 <__fp_round>:
 4c0:	09 2e       	mov	r0, r25
 4c2:	03 94       	inc	r0
 4c4:	00 0c       	add	r0, r0
 4c6:	11 f4       	brne	.+4      	; 0x4cc <__fp_round+0xc>
 4c8:	88 23       	and	r24, r24
 4ca:	52 f0       	brmi	.+20     	; 0x4e0 <__fp_round+0x20>
 4cc:	bb 0f       	add	r27, r27
 4ce:	40 f4       	brcc	.+16     	; 0x4e0 <__fp_round+0x20>
 4d0:	bf 2b       	or	r27, r31
 4d2:	11 f4       	brne	.+4      	; 0x4d8 <__fp_round+0x18>
 4d4:	60 ff       	sbrs	r22, 0
 4d6:	04 c0       	rjmp	.+8      	; 0x4e0 <__fp_round+0x20>
 4d8:	6f 5f       	subi	r22, 0xFF	; 255
 4da:	7f 4f       	sbci	r23, 0xFF	; 255
 4dc:	8f 4f       	sbci	r24, 0xFF	; 255
 4de:	9f 4f       	sbci	r25, 0xFF	; 255
 4e0:	08 95       	ret

000004e2 <_exit>:
 4e2:	f8 94       	cli

000004e4 <__stop_program>:
 4e4:	ff cf       	rjmp	.-2      	; 0x4e4 <__stop_program>
