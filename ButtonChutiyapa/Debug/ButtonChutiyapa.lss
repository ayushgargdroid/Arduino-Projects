
ButtonChutiyapa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000366  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000366  000003fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  000003fa  2**0
                  ALLOC
  3 .stab         000006a8  00000000  00000000  000003fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000bc9  00000000  00000000  00000aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000166d  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001680  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__vector_16>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 84 00 	call	0x108	; 0x108 <main>
  74:	0c 94 b1 01 	jmp	0x362	; 0x362 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <map>:
#include<util/delay.h>

int mode = 0,x = 0;

int map(int x, int in_min, int in_max, int out_min, int out_max)
{
  7c:	0f 93       	push	r16
  7e:	1f 93       	push	r17
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	2c 97       	sbiw	r28, 0x0c	; 12
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	f8 94       	cli
  8e:	de bf       	out	0x3e, r29	; 62
  90:	0f be       	out	0x3f, r0	; 63
  92:	cd bf       	out	0x3d, r28	; 61
  94:	9a 83       	std	Y+2, r25	; 0x02
  96:	89 83       	std	Y+1, r24	; 0x01
  98:	7c 83       	std	Y+4, r23	; 0x04
  9a:	6b 83       	std	Y+3, r22	; 0x03
  9c:	5e 83       	std	Y+6, r21	; 0x06
  9e:	4d 83       	std	Y+5, r20	; 0x05
  a0:	38 87       	std	Y+8, r19	; 0x08
  a2:	2f 83       	std	Y+7, r18	; 0x07
  a4:	1a 87       	std	Y+10, r17	; 0x0a
  a6:	09 87       	std	Y+9, r16	; 0x09
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  a8:	29 81       	ldd	r18, Y+1	; 0x01
  aa:	3a 81       	ldd	r19, Y+2	; 0x02
  ac:	8b 81       	ldd	r24, Y+3	; 0x03
  ae:	9c 81       	ldd	r25, Y+4	; 0x04
  b0:	28 1b       	sub	r18, r24
  b2:	39 0b       	sbc	r19, r25
  b4:	49 85       	ldd	r20, Y+9	; 0x09
  b6:	5a 85       	ldd	r21, Y+10	; 0x0a
  b8:	8f 81       	ldd	r24, Y+7	; 0x07
  ba:	98 85       	ldd	r25, Y+8	; 0x08
  bc:	ba 01       	movw	r22, r20
  be:	68 1b       	sub	r22, r24
  c0:	79 0b       	sbc	r23, r25
  c2:	cb 01       	movw	r24, r22
  c4:	28 9f       	mul	r18, r24
  c6:	a0 01       	movw	r20, r0
  c8:	29 9f       	mul	r18, r25
  ca:	50 0d       	add	r21, r0
  cc:	38 9f       	mul	r19, r24
  ce:	50 0d       	add	r21, r0
  d0:	11 24       	eor	r1, r1
  d2:	2d 81       	ldd	r18, Y+5	; 0x05
  d4:	3e 81       	ldd	r19, Y+6	; 0x06
  d6:	8b 81       	ldd	r24, Y+3	; 0x03
  d8:	9c 81       	ldd	r25, Y+4	; 0x04
  da:	28 1b       	sub	r18, r24
  dc:	39 0b       	sbc	r19, r25
  de:	ca 01       	movw	r24, r20
  e0:	b9 01       	movw	r22, r18
  e2:	0e 94 89 01 	call	0x312	; 0x312 <__divmodhi4>
  e6:	cb 01       	movw	r24, r22
  e8:	9c 01       	movw	r18, r24
  ea:	8f 81       	ldd	r24, Y+7	; 0x07
  ec:	98 85       	ldd	r25, Y+8	; 0x08
  ee:	82 0f       	add	r24, r18
  f0:	93 1f       	adc	r25, r19
}
  f2:	2c 96       	adiw	r28, 0x0c	; 12
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	f8 94       	cli
  f8:	de bf       	out	0x3e, r29	; 62
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	cd bf       	out	0x3d, r28	; 61
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	1f 91       	pop	r17
 104:	0f 91       	pop	r16
 106:	08 95       	ret

00000108 <main>:

void main(void)
{
 108:	0f 93       	push	r16
 10a:	1f 93       	push	r17
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62
	sei();
 114:	78 94       	sei

	//INTERRUPT
	PORTD |= 1<<PIND3;
 116:	82 e3       	ldi	r24, 0x32	; 50
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	22 e3       	ldi	r18, 0x32	; 50
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	f9 01       	movw	r30, r18
 120:	20 81       	ld	r18, Z
 122:	28 60       	ori	r18, 0x08	; 8
 124:	fc 01       	movw	r30, r24
 126:	20 83       	st	Z, r18
	GICR |= 1<<INT1;
 128:	8b e5       	ldi	r24, 0x5B	; 91
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	2b e5       	ldi	r18, 0x5B	; 91
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	f9 01       	movw	r30, r18
 132:	20 81       	ld	r18, Z
 134:	20 68       	ori	r18, 0x80	; 128
 136:	fc 01       	movw	r30, r24
 138:	20 83       	st	Z, r18

	//ADC
	ADMUX = 0xC0;
 13a:	87 e2       	ldi	r24, 0x27	; 39
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	20 ec       	ldi	r18, 0xC0	; 192
 140:	fc 01       	movw	r30, r24
 142:	20 83       	st	Z, r18
	ADCSRA |= 1<<ADEN | 1<<ADIE | 1<<ADPS2 | 1<<ADSC;
 144:	86 e2       	ldi	r24, 0x26	; 38
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	26 e2       	ldi	r18, 0x26	; 38
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	f9 01       	movw	r30, r18
 14e:	20 81       	ld	r18, Z
 150:	2c 6c       	ori	r18, 0xCC	; 204
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18

	//16 BIT TIMER
	TCCR1A |= 1<<COM1A1 | 1<<WGM11 | 1<<COM1B1;
 156:	8f e4       	ldi	r24, 0x4F	; 79
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	2f e4       	ldi	r18, 0x4F	; 79
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	f9 01       	movw	r30, r18
 160:	20 81       	ld	r18, Z
 162:	22 6a       	ori	r18, 0xA2	; 162
 164:	fc 01       	movw	r30, r24
 166:	20 83       	st	Z, r18
	TCCR1B |= 1<<WGM12 | 1<<WGM13 | 1<<CS10;
 168:	8e e4       	ldi	r24, 0x4E	; 78
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	2e e4       	ldi	r18, 0x4E	; 78
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	f9 01       	movw	r30, r18
 172:	20 81       	ld	r18, Z
 174:	29 61       	ori	r18, 0x19	; 25
 176:	fc 01       	movw	r30, r24
 178:	20 83       	st	Z, r18
	ICR1 = 255;
 17a:	86 e4       	ldi	r24, 0x46	; 70
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	2f ef       	ldi	r18, 0xFF	; 255
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	fc 01       	movw	r30, r24
 184:	31 83       	std	Z+1, r19	; 0x01
 186:	20 83       	st	Z, r18
	x = map(x,0,1023,0,255);
 188:	80 91 62 00 	lds	r24, 0x0062
 18c:	90 91 63 00 	lds	r25, 0x0063
 190:	0f ef       	ldi	r16, 0xFF	; 255
 192:	10 e0       	ldi	r17, 0x00	; 0
 194:	20 e0       	ldi	r18, 0x00	; 0
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	4f ef       	ldi	r20, 0xFF	; 255
 19a:	53 e0       	ldi	r21, 0x03	; 3
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	70 e0       	ldi	r23, 0x00	; 0
 1a0:	0e 94 3e 00 	call	0x7c	; 0x7c <map>
 1a4:	90 93 63 00 	sts	0x0063, r25
 1a8:	80 93 62 00 	sts	0x0062, r24

	while(1)
	{
		if(mode==0)
 1ac:	80 91 60 00 	lds	r24, 0x0060
 1b0:	90 91 61 00 	lds	r25, 0x0061
 1b4:	89 2b       	or	r24, r25
 1b6:	51 f4       	brne	.+20     	; 0x1cc <main+0xc4>
		{
			OCR1A = x;
 1b8:	8a e4       	ldi	r24, 0x4A	; 74
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	20 91 62 00 	lds	r18, 0x0062
 1c0:	30 91 63 00 	lds	r19, 0x0063
 1c4:	fc 01       	movw	r30, r24
 1c6:	31 83       	std	Z+1, r19	; 0x01
 1c8:	20 83       	st	Z, r18
 1ca:	28 c0       	rjmp	.+80     	; 0x21c <main+0x114>
		}
		else if(mode==1)
 1cc:	80 91 60 00 	lds	r24, 0x0060
 1d0:	90 91 61 00 	lds	r25, 0x0061
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	51 f4       	brne	.+20     	; 0x1ec <main+0xe4>
		{
			OCR1B = x;
 1d8:	88 e4       	ldi	r24, 0x48	; 72
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	20 91 62 00 	lds	r18, 0x0062
 1e0:	30 91 63 00 	lds	r19, 0x0063
 1e4:	fc 01       	movw	r30, r24
 1e6:	31 83       	std	Z+1, r19	; 0x01
 1e8:	20 83       	st	Z, r18
 1ea:	18 c0       	rjmp	.+48     	; 0x21c <main+0x114>
		}
		else
		{
			OCR1A = 255 - x;
 1ec:	8a e4       	ldi	r24, 0x4A	; 74
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	20 91 62 00 	lds	r18, 0x0062
 1f4:	30 91 63 00 	lds	r19, 0x0063
 1f8:	4f ef       	ldi	r20, 0xFF	; 255
 1fa:	50 e0       	ldi	r21, 0x00	; 0
 1fc:	ba 01       	movw	r22, r20
 1fe:	62 1b       	sub	r22, r18
 200:	73 0b       	sbc	r23, r19
 202:	9b 01       	movw	r18, r22
 204:	fc 01       	movw	r30, r24
 206:	31 83       	std	Z+1, r19	; 0x01
 208:	20 83       	st	Z, r18
			OCR1B = x;
 20a:	88 e4       	ldi	r24, 0x48	; 72
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	20 91 62 00 	lds	r18, 0x0062
 212:	30 91 63 00 	lds	r19, 0x0063
 216:	fc 01       	movw	r30, r24
 218:	31 83       	std	Z+1, r19	; 0x01
 21a:	20 83       	st	Z, r18
		}
	}
 21c:	c7 cf       	rjmp	.-114    	; 0x1ac <main+0xa4>

0000021e <__vector_16>:

}

ISR(ADC_vect)
{
 21e:	1f 92       	push	r1
 220:	0f 92       	push	r0
 222:	00 90 5f 00 	lds	r0, 0x005F
 226:	0f 92       	push	r0
 228:	11 24       	eor	r1, r1
 22a:	2f 93       	push	r18
 22c:	3f 93       	push	r19
 22e:	8f 93       	push	r24
 230:	9f 93       	push	r25
 232:	ef 93       	push	r30
 234:	ff 93       	push	r31
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	00 d0       	rcall	.+0      	; 0x23c <__vector_16+0x1e>
 23c:	1f 92       	push	r1
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
	uint8_t low = ADCL;
 242:	84 e2       	ldi	r24, 0x24	; 36
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	fc 01       	movw	r30, r24
 248:	80 81       	ld	r24, Z
 24a:	89 83       	std	Y+1, r24	; 0x01
	uint16_t t = ADCH << 8 | low;
 24c:	85 e2       	ldi	r24, 0x25	; 37
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	fc 01       	movw	r30, r24
 252:	80 81       	ld	r24, Z
 254:	88 2f       	mov	r24, r24
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	38 2f       	mov	r19, r24
 25a:	22 27       	eor	r18, r18
 25c:	89 81       	ldd	r24, Y+1	; 0x01
 25e:	88 2f       	mov	r24, r24
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	82 2b       	or	r24, r18
 264:	93 2b       	or	r25, r19
 266:	9b 83       	std	Y+3, r25	; 0x03
 268:	8a 83       	std	Y+2, r24	; 0x02
	x = t;
 26a:	8a 81       	ldd	r24, Y+2	; 0x02
 26c:	9b 81       	ldd	r25, Y+3	; 0x03
 26e:	90 93 63 00 	sts	0x0063, r25
 272:	80 93 62 00 	sts	0x0062, r24
	ADCSRA |= 1<<ADSC;
 276:	86 e2       	ldi	r24, 0x26	; 38
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	26 e2       	ldi	r18, 0x26	; 38
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	f9 01       	movw	r30, r18
 280:	20 81       	ld	r18, Z
 282:	20 64       	ori	r18, 0x40	; 64
 284:	fc 01       	movw	r30, r24
 286:	20 83       	st	Z, r18
}
 288:	0f 90       	pop	r0
 28a:	0f 90       	pop	r0
 28c:	0f 90       	pop	r0
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	ff 91       	pop	r31
 294:	ef 91       	pop	r30
 296:	9f 91       	pop	r25
 298:	8f 91       	pop	r24
 29a:	3f 91       	pop	r19
 29c:	2f 91       	pop	r18
 29e:	0f 90       	pop	r0
 2a0:	00 92 5f 00 	sts	0x005F, r0
 2a4:	0f 90       	pop	r0
 2a6:	1f 90       	pop	r1
 2a8:	18 95       	reti

000002aa <__vector_2>:

ISR(INT1_vect)
{
 2aa:	1f 92       	push	r1
 2ac:	0f 92       	push	r0
 2ae:	00 90 5f 00 	lds	r0, 0x005F
 2b2:	0f 92       	push	r0
 2b4:	11 24       	eor	r1, r1
 2b6:	8f 93       	push	r24
 2b8:	9f 93       	push	r25
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62
	if(mode==0) mode = 1;
 2c2:	80 91 60 00 	lds	r24, 0x0060
 2c6:	90 91 61 00 	lds	r25, 0x0061
 2ca:	89 2b       	or	r24, r25
 2cc:	39 f4       	brne	.+14     	; 0x2dc <__vector_2+0x32>
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	90 93 61 00 	sts	0x0061, r25
 2d6:	80 93 60 00 	sts	0x0060, r24
 2da:	11 c0       	rjmp	.+34     	; 0x2fe <__vector_2+0x54>
	else if(mode==1) mode = 2;
 2dc:	80 91 60 00 	lds	r24, 0x0060
 2e0:	90 91 61 00 	lds	r25, 0x0061
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	39 f4       	brne	.+14     	; 0x2f6 <__vector_2+0x4c>
 2e8:	82 e0       	ldi	r24, 0x02	; 2
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	90 93 61 00 	sts	0x0061, r25
 2f0:	80 93 60 00 	sts	0x0060, r24
 2f4:	04 c0       	rjmp	.+8      	; 0x2fe <__vector_2+0x54>
	else mode = 0;
 2f6:	10 92 61 00 	sts	0x0061, r1
 2fa:	10 92 60 00 	sts	0x0060, r1
}
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	9f 91       	pop	r25
 304:	8f 91       	pop	r24
 306:	0f 90       	pop	r0
 308:	00 92 5f 00 	sts	0x005F, r0
 30c:	0f 90       	pop	r0
 30e:	1f 90       	pop	r1
 310:	18 95       	reti

00000312 <__divmodhi4>:
 312:	97 fb       	bst	r25, 7
 314:	07 2e       	mov	r0, r23
 316:	16 f4       	brtc	.+4      	; 0x31c <__divmodhi4+0xa>
 318:	00 94       	com	r0
 31a:	07 d0       	rcall	.+14     	; 0x32a <__divmodhi4_neg1>
 31c:	77 fd       	sbrc	r23, 7
 31e:	09 d0       	rcall	.+18     	; 0x332 <__divmodhi4_neg2>
 320:	0e 94 9d 01 	call	0x33a	; 0x33a <__udivmodhi4>
 324:	07 fc       	sbrc	r0, 7
 326:	05 d0       	rcall	.+10     	; 0x332 <__divmodhi4_neg2>
 328:	3e f4       	brtc	.+14     	; 0x338 <__divmodhi4_exit>

0000032a <__divmodhi4_neg1>:
 32a:	90 95       	com	r25
 32c:	81 95       	neg	r24
 32e:	9f 4f       	sbci	r25, 0xFF	; 255
 330:	08 95       	ret

00000332 <__divmodhi4_neg2>:
 332:	70 95       	com	r23
 334:	61 95       	neg	r22
 336:	7f 4f       	sbci	r23, 0xFF	; 255

00000338 <__divmodhi4_exit>:
 338:	08 95       	ret

0000033a <__udivmodhi4>:
 33a:	aa 1b       	sub	r26, r26
 33c:	bb 1b       	sub	r27, r27
 33e:	51 e1       	ldi	r21, 0x11	; 17
 340:	07 c0       	rjmp	.+14     	; 0x350 <__udivmodhi4_ep>

00000342 <__udivmodhi4_loop>:
 342:	aa 1f       	adc	r26, r26
 344:	bb 1f       	adc	r27, r27
 346:	a6 17       	cp	r26, r22
 348:	b7 07       	cpc	r27, r23
 34a:	10 f0       	brcs	.+4      	; 0x350 <__udivmodhi4_ep>
 34c:	a6 1b       	sub	r26, r22
 34e:	b7 0b       	sbc	r27, r23

00000350 <__udivmodhi4_ep>:
 350:	88 1f       	adc	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	5a 95       	dec	r21
 356:	a9 f7       	brne	.-22     	; 0x342 <__udivmodhi4_loop>
 358:	80 95       	com	r24
 35a:	90 95       	com	r25
 35c:	bc 01       	movw	r22, r24
 35e:	cd 01       	movw	r24, r26
 360:	08 95       	ret

00000362 <_exit>:
 362:	f8 94       	cli

00000364 <__stop_program>:
 364:	ff cf       	rjmp	.-2      	; 0x364 <__stop_program>
